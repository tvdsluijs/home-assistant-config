### Ambee Pollen Sensor Configuration
#
# Editor: Theo van der Sluijs
# Contact: info@itheo.tech
#
# Org Author: huizebruin / https://github.com/huizebruin
#
# Description: This configuration integrates Ambee Pollen data into Home Assistant.
# It includes a REST sensor to fetch pollen data based on the home location and several template sensors
# to display specific pollen counts and risks. It's useful for monitoring allergens like tree, grass, and weed pollen.
#
# Source of this file: https://github.com/huizebruin/Home-Assistant-Config/blob/main/sensors/ambee_pollen.yaml
# Sign up for an account at https://api-dashboard.getambee.com/#/signup for 100 API calls per day.
# If all is well, the zone for home should already be set up in your Home Assistant.
# Replace API-KEY with your values
# In your Secrets.yaml, place the following lines:
# (without the hash symbol) ambee-api: XXXXXXXXX
# (without the hash symbol) latitude: 53.XXXXXX   # this only needs to be entered once and can be used for multiple applications   replace 53.XXXXXX with your own
# (without the hash symbol) longitude: 6.XXXXXX   # this only needs to be entered once and can be used for multiple applications   replace 6.XXXXXX with your own
# Source: https://gist.github.com/michilehr/7ce7431f97e82523336a120b50d0ebe2


# REST sensor to fetch pollen data from Ambee API
- platform: rest
  name: pollen_data
  scan_interval: 3600 # Pollen data is updated every hour
  resource_template: https://api.ambeedata.com/latest/pollen/by-lat-lng?lat={{ state_attr("zone.home", "latitude") }}&lng={{ state_attr("zone.home", "longitude") }}
  value_template: >-
    {{ value_json.message}}
  headers:
    content-type: application/json
    x-api-key: !secret ambee-api  # API key is stored in secrets.yaml
  json_attributes_path: data[0]
  json_attributes:
    - Count
    - Risk
    - Species
    - updatedAt
    - time

# Template sensors for specific pollen data
- platform: template
  sensors:
    # Sensor for Tree Pollen Count and Risk 
    pollen_bomen:
      friendly_name: Bomen
      icon_template: mdi:tree
      # Template to determine tree pollen risk
      value_template: >-
        {% set state = state_attr("sensor.pollen_data", "Risk").tree_pollen %}
        {% if state == "Low" %} Weinig
        {% elif state == "Moderate"%} Matig
        {% elif state == "High"%} Hoog
        {% elif state == "Very High"%} Zeer hoog
        {% else %}Onbekend{% endif %}
      attribute_templates:
      # Additional attributes for specific tree species pollen counts
        Totaal: >-
          {{ state_attr("sensor.pollen_data", "Count").tree_pollen }} /m³
        Els: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Alder }} /m³
        Berk: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Birch }} /m³
        Coniferen: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Cypress }} /m³
        Iep: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Elm }} /m³
        Hazelaar: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Hazel }} /m³
        Eik: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Oak }} /m³
        Den: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Pine }} /m³
        Plataan: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Plane }} /m³
        Populier: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree["Poplar / Cottonwood"] }} /m³

    # Sensor for Grass Pollen Count and Risk
    pollen_grassen:
      friendly_name: Grassen
      icon_template: mdi:grass
      # Template to determine grass pollen risk
      value_template: >-
        {% set state = state_attr("sensor.pollen_data", "Risk").grass_pollen %}
        {% if state == "Low" %} Weinig
        {% elif state == "Moderate"%} Matig
        {% elif state == "High"%} Hoog
        {% elif state == "Very High"%} Zeer hoog
        {% else %}Onbekend{% endif %}
      attribute_templates:
      # Additional attributes for grass pollen count
        Totaal: >-
          {{ state_attr("sensor.pollen_data", "Count").grass_pollen }} /m³
        Gramineae: >-
          {{ state_attr("sensor.pollen_data", "Species").Grass["Grass / Poaceae"] }} /m³

    # Sensor for Weed Pollen Count and Risk
    pollen_onkruiden:
      friendly_name: Onkruiden
      icon_template: mdi:grass
      # Template to determine weed pollen risk
      value_template: >-
        {% set state = state_attr("sensor.pollen_data", "Risk").weed_pollen %}
        {% if state == "Low" %} Weinig
        {% elif state == "Moderate"%} Matig
        {% elif state == "High"%} Hoog
        {% elif state == "Very High"%} Zeer hoog
        {% else %}Onbekend{% endif %}
      attribute_templates:
      # Additional attributes for specific weed species pollen counts
        Totaal: >-
          {{ state_attr("sensor.pollen_data", "Count").weed_pollen }} /m³
        Amaranten/Ganzenvoet: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Chenopod }} /m³
        Bijvoet: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Mugwort }} /m³
        Brandnetel: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Nettle }} /m³
        Ambrosia: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Ragweed }} /m³

    # Additional template sensors for individual pollen counts
    pollen_tree_count:
      icon_template: mdi:tree-outline
      friendly_name: "Bomen"
      unit_of_measurement: " /m³"
      value_template: '{{ state_attr("sensor.pollen_data", "Count").tree_pollen }}'

    pollen_weed_count:
      icon_template: mdi:grass
      friendly_name: "Onkruid"
      unit_of_measurement: " /m³"
      value_template: '{{ state_attr("sensor.pollen_data", "Count").weed_pollen }}'

    pollen_grass_count:
      icon_template: mdi:grass
      friendly_name: "Gras"
      unit_of_measurement: " /m³"
      value_template: '{{ state_attr("sensor.pollen_data", "Count").grass_pollen }}'

    # Sensor for the timestamp of the last update
    pollen_last_updated:
      icon_template: "mdi:clock"
      friendly_name: "Laatste update"
      device_class: timestamp
      value_template: "{{ state_attr('sensor.pollen_data', 'updatedAt') }}"

# End of configuration